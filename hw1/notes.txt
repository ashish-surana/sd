Any changes that you made to the proposed design and how they continue to  support the requirements
1. 'filename' paramter of Importer.importTripleFile() method is changed to 'queryFilePath' to follow Java parameter naming convention.

2. I used TripleParser and QueryParser classes to parse triple and query as per the given requirements.
These classes helped me in maintaining separation of concerns.

3. I created BulkQueryException class to capture line number, and query file path during file-based query processing errors.

4. I created InvalidTripleFormatException to capture complete details about an invalid triple.

5. In Importer class, I read the file contents one line at a time, and passed the resulting triple to KnowledgeGraph.
This pattern allows me to read large input files without having to load entire file in memory.


Did the design document help with the implementation?
Yes, the design document helped me in understanding unique responsibility of each class. It also helped me in understadning
 how various classed will interact with each other to fulfill a use case.

How could the design have been better, clearer, or made the implementation  easier?
1. Code reuse can be increased by sharing validation logic between QueryParser and TripleParser.

2. As a generally accepted design practice, getter methods in KnowledgeGraph should not be doing anything more than
 just returning an object. Instead, these methods were creating objects, and updating various relationships.

3. In order to hide unnecessary APIs and reduce coupling, KnowledgeGraph can set access level of following methods as private:
getNode(), getPredicate(), getTriple()

4. The design could have provided edge cases, error scenarios, and expected error messages.